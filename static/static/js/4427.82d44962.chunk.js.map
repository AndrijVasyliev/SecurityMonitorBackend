{"version":3,"file":"static/js/4427.82d44962.chunk.js","mappings":"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","sources":["components/LocationForGrid.tsx","facilities/facilities.tsx","../node_modules/@mui/icons-material/esm/ContentCopy.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\r\n\r\nimport { debounce } from '@mui/material/utils';\r\n\r\nimport { useSnackbar, useLoader } from '../hooks';\r\nimport { GeoPoint } from '../utils/dataTypes';\r\nimport { toStringLocation } from '../utils/toStringLocation';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\nimport ContentCopy from '@mui/icons-material/ContentCopy';\r\nimport { selectLocation } from '../utils/selectLocation';\r\nimport { getMapSettings } from '../utils/getMapSettings';\r\n\r\nexport default function LocationForGrid({\r\n  location,\r\n  onRefClick,\r\n  addInfo,\r\n  children,\r\n}: {\r\n  readonly location: GeoPoint;\r\n  onRefClick?: (event: React.SyntheticEvent) => void;\r\n  addInfo?: string;\r\n  children?: React.ReactNode;\r\n}) {\r\n  const [value, setValue] = React.useState<google.maps.GeocoderResult | null>(\r\n    null,\r\n  );\r\n  const [items, setItems] = React.useState<google.maps.GeocoderResult[]>([]);\r\n  const [geocoder, setGeocoder] = React.useState<google.maps.Geocoder | null>(\r\n    null,\r\n  );\r\n\r\n  const setSearch = React.useMemo(() => {\r\n    return debounce((geocodeRequest: google.maps.GeocoderRequest): void => {\r\n      (geocoder?.geocode(geocodeRequest) || Promise.reject())\r\n        .then((result) => {\r\n          if (result.results.length < 1 && geocodeRequest.location) {\r\n            const locationFromRequest = new google.maps.LatLng(\r\n              geocodeRequest.location,\r\n            );\r\n            const res: google.maps.GeocoderResult = {\r\n              address_components: [],\r\n              formatted_address: `[${locationFromRequest.lat()}, ${locationFromRequest.lng()}]`,\r\n              geometry: {\r\n                location: locationFromRequest,\r\n                location_type: google.maps.GeocoderLocationType.APPROXIMATE,\r\n                viewport: new google.maps.LatLngBounds(),\r\n              },\r\n              place_id: `[${locationFromRequest.lat()}, ${locationFromRequest.lng()}]`,\r\n              types: [],\r\n            };\r\n            setItems([res]);\r\n          } else {\r\n            result.results.forEach(\r\n              (item) =>\r\n                (item.formatted_address = toStringLocation(\r\n                  item.address_components,\r\n                )),\r\n            );\r\n            setItems(result.results);\r\n          }\r\n        })\r\n        .catch((/*err*/) => {\r\n          setItems([]);\r\n        });\r\n    }, 400);\r\n  }, [geocoder]);\r\n\r\n  React.useEffect(() => {\r\n    const selected = location && selectLocation(items);\r\n    if (location && selected && selected?.place_id !== value?.place_id) {\r\n      setValue(selected);\r\n    }\r\n  }, [location, items]);\r\n\r\n  React.useEffect(() => {\r\n    if (location) {\r\n      setSearch({\r\n        location: {\r\n          lat: location[0],\r\n          lng: location[1],\r\n        },\r\n      });\r\n    } else {\r\n      setItems([]);\r\n      setValue(null);\r\n    }\r\n  }, [geocoder, location.join(',')]);\r\n\r\n  const handleApiLoad = (status: Status): React.ReactElement => {\r\n    const setSnackbarMessage = useSnackbar();\r\n    const [, setLoaderVisibility] = useLoader();\r\n    React.useLayoutEffect(() => {\r\n      if (status === Status.LOADING) {\r\n        setLoaderVisibility(true);\r\n      }\r\n      if (status === Status.FAILURE) {\r\n        setSnackbarMessage({\r\n          severity: 'error',\r\n          message: 'Error loading maps!',\r\n        });\r\n      }\r\n      if (status === Status.SUCCESS) {\r\n        setGeocoder(new window.google.maps.Geocoder());\r\n      }\r\n      return () => {\r\n        if (status === Status.LOADING) {\r\n          setLoaderVisibility(false);\r\n        }\r\n      };\r\n    }, [status]);\r\n    return null as unknown as React.ReactElement;\r\n  };\r\n\r\n  return (\r\n    <span style={{ display: 'flex' }}>\r\n      <Wrapper {...getMapSettings()} render={handleApiLoad} />\r\n      <span\r\n        style={{\r\n          textOverflow: 'ellipsis',\r\n          overflow: 'hidden',\r\n          textAlign: 'left',\r\n        }}\r\n        title={`${value ? value.formatted_address : ''}` + '\\n' + addInfo}\r\n      >\r\n        {onRefClick ? (\r\n          <a href={'#'} target=\"_blank\" onClick={onRefClick}>\r\n            {value ? value.formatted_address : ''}\r\n          </a>\r\n        ) : value ? (\r\n          value.formatted_address\r\n        ) : (\r\n          ''\r\n        )}\r\n        {!addInfo ? null : (\r\n          <>\r\n            <br />\r\n            {addInfo}\r\n          </>\r\n        )}\r\n        {children}\r\n      </span>\r\n      {!value ? null : (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={(event) => {\r\n            stopPropagation(event);\r\n            navigator.clipboard.writeText(value.formatted_address);\r\n          }}\r\n        >\r\n          <ContentCopy sx={{ height: '16px', width: '16px' }} />\r\n        </IconButton>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\nimport LocationForGrid from '../components/LocationForGrid';\r\nimport { FacilitiesQuery, FacilityDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Facility } from '../utils/dataTypes';\r\n// import { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Facility;\r\n  getData: (row: Facility) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'name',\r\n    orderField: 'name',\r\n    getData: (row) => ({ data: `${row.name}` }),\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Facility Name',\r\n  },\r\n  {\r\n    id: 'facilityAddress',\r\n    getData: (row) => {\r\n      const firstRow = `${row.address}`;\r\n      const secondRow = `${row.address2 || ''}`;\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow || ' '}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Address',\r\n  },\r\n  {\r\n    id: 'facilityLocation',\r\n    getData: (row) => {\r\n      return {\r\n        data: <LocationForGrid location={row.facilityLocation} />,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Location',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Facility,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Facility) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [facilitySearch, setFacilitySearch] = React.useState<string>('');\r\n  const [searchChanged, setSearchChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(FacilityDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['facilities']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const facilityHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFacilitySearch(event.target.value);\r\n    setSearchChanged(true);\r\n  };\r\n  const filterClearHandler = () => {\r\n    setSearchChanged(false);\r\n    setFacilitySearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setSearchChanged(false);\r\n    setQueryParams({ name: facilitySearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (facilitySearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Facilities\r\n        </Typography>\r\n      )}\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '140px' },\r\n        }}\r\n      >\r\n        <TextField\r\n          label=\"Facility Search\"\r\n          value={facilitySearch}\r\n          onChange={facilityHandler}\r\n          onKeyUp={keyUpHandler}\r\n          size=\"small\"\r\n        />\r\n      </Box>\r\n      <Tooltip title=\"Filter list\">\r\n        {(searchChanged || !facilitySearch) &&\r\n        !(searchChanged && !facilitySearch) ? (\r\n          <span>\r\n            <IconButton disabled={!facilitySearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        <Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('desc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Facility | undefined>(\r\n    'name',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    error,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['facilities', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: FacilitiesQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n  });\r\n  React.useEffect(() => {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    setSnackbarMessage({\r\n      severity: 'error',\r\n      message: error instanceof Error ? error.message : JSON.stringify(error),\r\n    });\r\n  }, [error]);\r\n  const rows: Facility[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Facility,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Facility) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0 16H8V7h11z\"\n}), 'ContentCopy');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["LocationForGrid","_ref","location","onRefClick","addInfo","children","value","setValue","React","items","setItems","geocoder","setGeocoder","setSearch","debounce","geocodeRequest","geocode","Promise","reject","then","result","results","length","locationFromRequest","google","maps","LatLng","res","address_components","formatted_address","concat","lat","lng","geometry","location_type","GeocoderLocationType","APPROXIMATE","viewport","LatLngBounds","place_id","types","forEach","item","toStringLocation","catch","selected","selectLocation","join","_jsxs","style","display","_jsx","Wrapper","_objectSpread","getMapSettings","render","status","setSnackbarMessage","useSnackbar","setLoaderVisibility","useLoader","Status","LOADING","FAILURE","severity","message","SUCCESS","window","Geocoder","textOverflow","overflow","textAlign","title","href","target","onClick","_Fragment","IconButton","size","event","stopPropagation","navigator","clipboard","writeText","ContentCopy","sx","height","width","headCells","id","orderField","getData","row","data","name","numeric","disablePadding","label","firstRow","address","secondRow","address2","facilityLocation","StyledTableHead","styled","TableHead","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","Box","component","visuallyHidden","EnhancedTableToolbar","setQueryParams","facilitySearch","setFacilitySearch","searchChanged","setSearchChanged","useLocation","navigate","useNavigate","queryClient","useQueryClient","mutate","isLoading","useMutation","FacilityDelete","onSuccess","invalidateQueries","onError","error","Error","JSON","stringify","filterClearHandler","filterHandler","Toolbar","pl","sm","pr","xs","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","m","TextField","onKeyUp","key","Tooltip","FilterListOffIcon","disabled","FilterListIcon","p","createHandler","relative","state","from","replace","AddIcon","editHandler","EditIcon","deleteHandler","DeleteIcon","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","total","useQuery","queryKey","queryFn","FacilitiesQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","selectedItem","find","push","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","selectedIndex","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","createSvgIcon","d"],"sourceRoot":""}