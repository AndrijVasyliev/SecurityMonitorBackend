{"version":3,"file":"static/js/1174.5745a21d.chunk.js","mappings":"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","sources":["locations/editLocation.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { Loader, LocationField, TextField } from '../components';\r\n\r\nimport { LocationUpdate, LocationQuery } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { FormOnClose, GeoPoint, UpdateLocation } from '../utils/dataTypes';\r\nimport { cleanObject } from '../utils/queryHelpers';\r\n\r\nconst validationSchema = yup.object({\r\n  zipCode: yup.string().required('Zip Code is required'),\r\n  name: yup.string().required('Name is required'),\r\n  stateCode: yup.string().required('State Code is required'),\r\n  stateName: yup.string().required('State Name is required'),\r\n  location: yup\r\n    .tuple([\r\n      yup\r\n        .number()\r\n        .typeError('Latitude is required')\r\n        .min(-90, 'Latitude must be grater than or equal: -90')\r\n        .max(90, 'Latitude must be less than or equal: 90')\r\n        .required('Location should be in format \"latitude, longitude\"'),\r\n      yup\r\n        .number()\r\n        .typeError('Longitude is required')\r\n        .min(-180, 'Longitude must be grater than or equal: -180')\r\n        .max(180, 'Longitude must be less than or equal: 180')\r\n        .required('Location should be in format \"latitude, longitude\"'),\r\n    ])\r\n    .required('Location is required'),\r\n});\r\n\r\nconst initialValues = {\r\n  id: '',\r\n  zipCode: '',\r\n  name: '',\r\n  stateCode: '',\r\n  stateName: '',\r\n  location: [NaN, NaN] as GeoPoint,\r\n};\r\n\r\nexport default function EditLocationForm({\r\n  id,\r\n  onClose,\r\n}: {\r\n  id: string;\r\n  onClose: FormOnClose;\r\n}) {\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading: loading,\r\n    isFetching: fetching,\r\n    error,\r\n    data,\r\n  } = useQuery({\r\n    queryKey: ['location', id],\r\n    queryFn: LocationQuery,\r\n    retry: false,\r\n  });\r\n  React.useEffect(() => {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    setSnackbarMessage({\r\n      severity: 'error',\r\n      message: error instanceof Error ? error.message : JSON.stringify(error),\r\n    });\r\n  }, [error]);\r\n\r\n  const { mutate, isLoading } = useMutation(LocationUpdate, {\r\n    onSuccess: (data) => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Saved',\r\n      });\r\n      queryClient.invalidateQueries(['location', id]);\r\n      queryClient.invalidateQueries(['locations']);\r\n      onClose('Save', data);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const formik = useFormik<UpdateLocation>({\r\n    initialValues: {\r\n      ...initialValues,\r\n      ...cleanObject(data, Object.keys(initialValues)),\r\n    },\r\n    enableReinitialize: true,\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      mutate(values);\r\n    },\r\n  });\r\n\r\n  const handleClose = () => {\r\n    onClose('Close');\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\r\n        <Box sx={{ p: 3, display: 'grid' }}>\r\n          <Box key=\"controls\" sx={{ display: 'inline-flex' }}>\r\n            <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\r\n              <TextField fieldName=\"name\" label=\"Name\" formik={formik} />\r\n              <TextField\r\n                fieldName=\"stateName\"\r\n                label=\"State Name\"\r\n                formik={formik}\r\n              />\r\n            </Box>\r\n            <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\r\n              <TextField fieldName=\"zipCode\" label=\"Zip Code\" formik={formik} />\r\n              <TextField\r\n                fieldName=\"stateCode\"\r\n                label=\"State Code\"\r\n                formik={formik}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          <Box key=\"location\" sx={{ marginTop: -2, display: 'inline-flex' }}>\r\n            <LocationField\r\n              fieldName=\"location\"\r\n              label={['Latitude', 'Longitude']}\r\n              formik={formik}\r\n            />\r\n          </Box>\r\n          <Box key=\"buttons\" sx={{ display: 'inline-flex' }}>\r\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Box>\r\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </form>\r\n      <Loader visible={isLoading || loading || fetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["validationSchema","yup","zipCode","required","name","stateCode","stateName","location","typeError","min","max","initialValues","id","NaN","EditLocationForm","_ref","onClose","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","isLoading","loading","isFetching","fetching","error","data","useQuery","queryKey","queryFn","LocationQuery","retry","React","severity","message","Error","JSON","stringify","mutate","useMutation","LocationUpdate","onSuccess","invalidateQueries","onError","formik","useFormik","_objectSpread","cleanObject","Object","keys","enableReinitialize","onSubmit","values","_jsxs","Box","children","_jsx","handleSubmit","onReset","handleReset","sx","p","display","width","TextField","fieldName","label","marginTop","LocationField","paddingTop","Button","fullWidth","variant","size","color","type","disabled","dirty","onClick","handleClose","Loader","visible"],"sourceRoot":""}